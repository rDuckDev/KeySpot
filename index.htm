<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<title>KeySpot</title>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootswatch@4.0.0/dist/yeti/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/animate.css@3.5.2/animate.min.css">
</head>
<body>
	<nav class="navbar navbar-dark bg-primary">
		<div class="container">
			<strong class="navbar-brand">
				<i class="fa fa-key fa-lg fa-rotate-270 text-warning"></i>Spot
			</strong>
		</div>
	</nav>

	<main id="KeySpotApp" class="container">
		<spot-form v-on:add="add"></spot-form>
		<div class="card mt-4">
			<div class="card-header">
				<h3 class="m-0">
					<button class="close" data-toggle="modal" data-target="#SpotForm">&plus;</button>
					<div class="dropdown">
						<button type="button" class="close pull-left mt-1 mr-2" type="button" id="SortMenu" data-toggle="dropdown">
							<small>
								<i class="fa fa-sort fa-fw" v-if="!isSorting"></i>
								<i class="fa fa-sort fa-spin fa-fw" v-else></i>
							</small>
						</button>
						<div class="dropdown-menu" aria-labelledby="SortMenu">
							<button type="button" class="dropdown-item" v-on:click="sortDefault">
								<i class="fa fa-sort-amount-asc fa-fw"></i> Default
							</button>
							<button type="button" class="dropdown-item" v-on:click="sortName">
								<i class="fa fa-sort-alpha-asc fa-fw"></i> Name
							</button>
							<button type="button" class="dropdown-item" v-on:click="sortPasscode">
								<i class="fa fa-sort-numeric-asc fa-fw"></i> Passcode
							</button>
							<button type="button" class="dropdown-item" v-on:click="sortDistance">
								<i class="fa fa-location-arrow fa-fw"></i> Distance
							</button>
						</div>
						
					</div>
					My spots
				</h3>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col" v-if="!spots.length">
						<div class="alert alert-warning">
							<span class="mr-2">Add a spot to begin.</span>
							<button class="btn btn-warning" data-toggle="modal" data-target="#SpotForm">&plus;</button>
						</div>
					</div>
					<div class="col-12 col-md-6 col-lg-4 mb-4" v-for="spot in spots">
						<spot-card
							v-bind:spot="spot"
							v-bind:key="spot._id"
							v-on:remove="remove">
						</spot-card>
					</div>
				</div>
			</div>
		</div>
	</main>

	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@1.0.22/webcomponents-lite.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue@2.5.13/dist/vue.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/pouchdb@6.4.1/dist/pouchdb.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/lodash@4.17.4/lodash.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/rDuckDev/CoreJS@0.1.0-alpha/core.js"></script>
	<script type="text/javascript">
		(function () {
			"use strict";

			var DOM = {},
				App = {},
				Bundle = {},
				Components = [];

			Components.push("./component/form.htm");
			Components.push("./component/card.htm");

			var spotDB = new PouchDB("SpotDB");

			function deg2rad (deg) {
				return deg * (Math.PI/180);
			}
			function getDistance (lat1, lon1, lat2, lon2) {
				// https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula
				var R = 6371; // Radius of the earth in km
				var dLat = deg2rad(lat2-lat1); // deg2rad below
				var dLon = deg2rad(lon2-lon1);
				var a =  Math.sin(dLat/2) * Math.sin(dLat/2) +
					Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
					Math.sin(dLon/2) * Math.sin(dLon/2);
				var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
				var d = R * c; // Distance in km
				return d;
			}
			function sortDefault () {
				this. isSorting = true;

				this.spots = _.sortBy(this.spots, [ "_id" ]);

				this.isSorting = false;
			}
			function sortName () {
				this.isSorting = true;

				this.spots = _.sortBy(this.spots, [ "uName" ]);

				this.isSorting = false;
			}
			function sortDistance () {
				if (!"geolocation" in navigator) return;

				var self = this;

				self.isSorting = true;

				navigator.geolocation.getCurrentPosition(function (position) {
					self.spots = _.sortBy(self.spots, [ function (spot) {
						return getDistance(
							position.coords.latitude,
							position.coords.longitude,
							spot.uLatitude,
							spot.uLongitude
						);
					}, "uName" ]);

					self.isSorting = false;
				});
			}
			function sortPasscode () {
				this.isSorting = true;

				this.spots = _.sortBy(this.spots, [ "uCode", "uName" ]);

				this.isSorting = false;
			}
			function loadData () {
				var self = this;

				spotDB.allDocs({ include_docs: true })
					.then(function (results) {
						_.forEach(results.rows, function (row) {
							var rec = _.cloneDeep(row.doc);

							delete rec._rev;

							self.spots.push(rec);
						});
					});
			}
			function add (spot) {
				var rec = {
					_id: new Date().getTime().toString(),
					uName: spot.uName,
					uLatitude: spot.uLatitude,
					uLongitude: spot.uLongitude,
					uLink: spot.uLink,
					uCode: spot.uCode
				};

				spotDB.put(rec);
				this.spots.push(rec);
			}
			function remove (id) {
				var index = _.findIndex(this.spots, [ "_id", id ]);

				spotDB.get(this.spots[index]._id)
					.then(function (rec) {
						return spotDB.remove(rec);
					});
				this.spots.splice(index, 1);
			}
			function buildApp () {
				new Vue({
					el: "#KeySpotApp",
					data: {
						spots: [],
						isSorting: false
					},
					methods: {
						add: add,
						remove: remove,
						loadData: loadData,
						sortDefault: sortDefault,
						sortName: sortName,
						sortDistance: sortDistance,
						sortPasscode: sortPasscode
					},
					beforeMount: function () { this.loadData() }
				});
			}

			jQuery(document).ready(function () {
				CORE.loadComponents(Components, buildApp);
			});
		} ());
	</script>
</body>
</html>